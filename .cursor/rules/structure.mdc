---
alwaysApply: true
---

# Project Structure Rules

## Root Directory Organization
- Keep `index.html` as the main entry point
- Place all configuration files at root level: `package.json`, `vite.config.js`, `tailwind.config.js`
- Maintain documentation files: `README.md`, `QUICKSTART.md`, `CONTRIBUTING.md`
- Include license and changelog files: `LICENSE`, `CHANGELOG.md`

## Source Code Structure (`src/`)
- `src/main.js` - Main application entry point and Alpine.js initialization
- `src/styles/main.css` - Custom CSS imports and Tailwind directives
- Keep JavaScript modular with clear function separation
- Import external libraries at the top of main.js

## Public Assets (`public/`)
- `public/images/` - All static images (hero-bg.jpg, painter-working.jpg)
- `public/favicon.ico` - Site favicon
- `public/robots.txt` - SEO crawler instructions
- `public/CNAME` - Custom domain configuration for GitHub Pages
- Use absolute paths for public assets: `/images/filename.jpg`

## Build Output (`dist/`)
- Generated by Vite build process - never edit manually
- Contains optimized assets and bundled JavaScript
- Excluded from version control via `.gitignore`
- Deployed to GitHub Pages automatically

## Configuration Files
- `package.json` - Dependencies, scripts, and project metadata
- `vite.config.js` - Build tool configuration and optimization settings
- `tailwind.config.js` - Custom colors, fonts, and design system
- `postcss.config.js` - CSS processing configuration
- `.eslintrc.js` - Code quality and formatting rules

## Documentation Structure
- `README.md` - Project overview and setup instructions
- `QUICKSTART.md` - Step-by-step deployment guide
- `CONTRIBUTING.md` - Development guidelines and contribution process
- `CHANGELOG.md` - Version history and changes
- `MIGRATION.md` - Upgrade instructions between versions

## File Naming Conventions
- Use kebab-case for all files: `main.js`, `tailwind.config.js`
- Use descriptive names that indicate purpose
- Keep image filenames descriptive: `hero-bg.jpg`, `painter-working.jpg`
- Use consistent extensions: `.js`, `.css`, `.html`, `.md`

## Asset Organization
- Group related files together (configs, docs, source)
- Keep build artifacts separate from source code
- Use consistent directory depth (avoid deep nesting)
- Place temporary files in appropriate directories

## Import/Export Standards
- Use ES6 modules with `import`/`export` syntax
- Import external libraries before local modules
- Group imports by type: external libraries, then local files
- Use relative paths for local imports, absolute for public assets

## Version Control Structure
- Include `.gitignore` for build artifacts and dependencies
- Track all source files and configuration
- Exclude `node_modules/`, `dist/`, and temporary files
- Maintain clean commit history with meaningful messages